from pydantic import BaseModel, Field
from agents import Agent
import os
from dotenv import load_dotenv

load_dotenv(override=True)
model = os.getenv('AI_MODEL', '')

class RefinementQuestion(BaseModel):
    original_query: str = Field(description="The original query that needs refinement")
    question: list[str] = Field(description="A specific question to ask the user to refine their query")
    answer: list[str] = Field(default=None, description="The user's answer to the question")
    reason: str = Field(description="Why this question will help refine the search")
    is_final: bool = Field(default=False, description="Whether this is the final question or not")


class RefinedQuery(BaseModel):
    reason: str = Field(description="A query well designed by the agent")
    query: str = Field(description="A search term to use in a web search.")


REFINEMENT_INSTRUCTION = """
You are an interactive query refinement assistant. Your goal is to help the user improve their search query by asking specific, targeted questions and storing each question and answer in the `RefinementQuestion` class.

Process:
1. Analyse the user's current query to identify any critical missing information.
2. If the query lacks important details and you have asked fewer than two questions, ask exactly one clear, specific question that will help refine the query. Record each question and its answer in `RefinementQuestion`.
3. If you have already asked two questions, or if the query is detailed enough, stop and finalise the refinement process.

Rules:
- Never ask more than two questions. After two questions you must finalise the refinement.
- Each question must be relevant and designed to extract information that materially improves the query.
- When finishing, collect the original query together with all questions and answers you have stored in `RefinementQuestion`.
- You must ALWAYS pass this complete set of information to the refactor agent via the handoff so it can generate the final optimised query.

Output:
- If you are asking a question:
  - Provide the question and briefly explain how the answer will help refine the search.
- If you are finalising:
  - Provide the original query, all the stored questions and answers, and a brief explanation of the improvements made.
  - Perform always the handoff to the refactor agent with all of this information.
"""

REFACTOR_INSTRUCTION = """
You are a query optimisation agent. Your task is to receive the original query along with all the questions and answers generated by the refinement agent, and produce a final, optimised query.

Process:
1. Analyse the original query and all the questions and answers provided by the refinement agent.
2. Use this information to optimise the final query, ensuring clarity, precision and effectiveness.

Output:
- Provide the optimised query and explain how the questions and answers helped to improve it.
"""

refactor_query_agent = Agent(
    name="Refactor query agent",
    instructions=REFACTOR_INSTRUCTION,
    output_type=RefinedQuery,
    model=model
)

refinement_agent = Agent(
    name="Refinement agent",
    instructions=REFINEMENT_INSTRUCTION,
    model=model,
    output_type=RefinementQuestion,
    handoffs=[refactor_query_agent]
)

